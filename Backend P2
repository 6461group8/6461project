public class ComputerSimulator {
    // Registers
    private short[] GPR = new short[4]; // General Purpose Registers
    private short[] IR = new short[4]; // Index Registers, using IR[0] as placeholder to keep indexing consistent
    private short PC; // Program Counter (12-bit, but stored in a 16-bit short for convenience)
    private short MAR; // Memory Address Register
    private short MBR; // Memory Buffer Register
    private short IRG; // Instruction Register
    private byte MFR, CC; // Memory Fault Register and Condition Code (Not fully implemented)
    private short[] memory = new short[4096];     // Memory (simplified as an array of shorts, 4096 locations for 12-bit address space)

   
    public ComputerSimulator() {
        // Initialize registers and memory if necessary
    }

    // Store the value from MBR into the memory location specified by MAR
    public void store() {
        memory[MAR & 0xFFF] = MBR; // Ensure MAR doesn't exceed 12 bits
    }

    // Load the value from a specified memory location into MBR
    public void load() {
        MBR = memory[MAR & 0xFFF]; // Ensure MAR doesn't exceed 12 bits
    }

 // Reset the system
    public void reset() {
        for(int i = 0; i < GPR.length; i++) {
            GPR[i] = 0;
        }
        for(int i = 0; i < IR.length; i++) {
            IR[i] = 0;
        }
        PC = 0;
        MAR = 0;
        MBR = 0;
        instructionRegister = 0;
        for(int i = 0; i < memory.length; i++) {
            memory[i] = 0;
        }
    }
    // Convert Octal String to Binary String
    public String octalToBinary(String octalInput) {
        int decimal = Integer.parseInt(octalInput, 8);
        return Integer.toBinaryString(decimal);
    }

    // operations added next

    public static void main(String[] args) {
        ComputerSimulator simulator = new ComputerSimulator();

    }
}
